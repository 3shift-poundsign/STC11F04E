C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\keil\install\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #define uchar unsigned char
   4          #define uint unsigned int
   5          uint temp;              // 温度变量
   6          sbit DS = P1^7;         // DS18B20 数据端口
   7          sbit DAT = P3^0;        // 74HC164 数据输入端口
   8          sbit CLK = P3^1;        // 74HC164 时钟输入端口
   9          sbit DP1 = P3^5;        // 小数点
  10          
  11          //定义数码管段选(不加小数点0~9)
  12          unsigned char code table1[]={0x81,0xD7,0xC8,0xC2,0x96,0xA2,0xA0,0xC7,0x80,0x82};
  13          
  14          
  15          /**********************************************************
  16          *  函数名称：低精度延时函数
  17          *  日期：2019-9-7
  18          *  姓名：ZhangHJ
  19          *  说明：嵌套循环延时
  20          ***********************************************************/
  21          void delay(unsigned int mstime)
  22          {
  23   1        int i,j;
  24   1        for(i=mstime; i>=0; i--)
  25   1          for(j=114; j>=0; j--);
  26   1      }
  27          
  28          /**********************************************************
  29          *  函数名称：1ms高精度延时函数(1.004ms)(11.0592MHz)
  30          *  日期：2019-10-4
  31          *  姓名：ZhangHJ
  32          *  说明：嵌套循环延时,延时1.004ms已用示波器测量
  33          ***********************************************************/
  34          //void delay_ms()
  35          //{
  36          //  int i,j;
  37          //  for(i=1; i>=0; i--)
  38          //    for(j=123; j>=0; j--);
  39          //}
  40          
  41          
  42          /**********************************************************
  43          *  函数名称：12us高精度延时函数(12.04us)(11.0592MHz)
  44          *  日期：2019-10-4
  45          *  姓名：ZhangHJ
  46          *  说明：嵌套循环延时,延时12.04us已用示波器测量
  47          ***********************************************************/
  48          //void delay_12us()
  49          //{
  50          //  int i;
  51          //  i++;i++;
  52          //}
  53          
  54          /**********************************************************
C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 2   

  55          *  函数名称：6us高精度延时函数(6.280us)(11.0592MHz)
  56          *  日期：2019-10-4
  57          *  姓名：ZhangHJ
  58          *  说明：嵌套循环延时,延时6.280us已用示波器测量
  59          ***********************************************************/
  60          //void delay_6us()
  61          //{
  62          //  _nop_();
  63          //  _nop_();
  64          //}
  65          
  66          //_nop_();      //2.340us
  67          
  68          
  69          /**********************************************************
  70          *  函数名称：74HC164发送Byte函数
  71          *  日期：2019-9-29
  72          *  姓名：ZhangHJ
  73          *  说明：74HC164移位寄存器输入一字节数据发给寄存器
  74          ***********************************************************/
  75          void SendByte_74HC164(uchar byte)
  76          {
  77   1        uchar num,c;
  78   1        num=table1[byte];
  79   1        for(c=0; c<8; c++)
  80   1        {
  81   2          DAT=num&0x01;   // P3^0 --> 0000 000x
  82   2          CLK=0;          // 制造一个上升沿
  83   2          CLK=1;
  84   2          num>>=1;        // 将数据发送到寄存器
  85   2        }
  86   1      }
  87          
  88          
  89          /**********************************************************
  90          *  函数名称：发送复位和初始化命令函数 dsinit
  91          *  修改日期：2019-9-9
  92          *  修改人：ZhangHJ
  93          *  说明：1. 对于单片机: 单片机首先发出480-960us的低电平脉冲,
  94          *           释放总线为高电平(上拉电阻拉高),在随后的480us进行检测,
  95          *           如果出现低电平，说明器件应答正常.B
  96          *        2. 对于DS18B20: 上电后就检测是否有480/960us的低电平脉冲,
  97          *           如果有低电平,在总线释放之后，等待15-60us,
  98          *           将电平拉低60-240us,告诉主机已经准备好.
  99          ***********************************************************/
 100          uchar dsreset(void)         // send reset and initialization command
 101          {
 102   1        uint i;
 103   1        DS = 0;                   // 先将端口拉低
 104   1        i=120;                    // 维持低电平状态480us~960us
 105   1        while(i>0)i--;
 106   1        DS = 1;                   // 然后释放总线(将总线拉高),若DS18B20做出反应,将会将在15us~60us后将总线拉低
 107   1        
 108   1        i = 0;
 109   1        while(DS)                 // 在DS高电平时等待
 110   1        {
 111   2          i++;
 112   2          if(i > 50000)           // 等待时间大于60us,说明响应失败
 113   2          {
 114   3            return 0;
 115   3          }
 116   2        }
C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 3   

 117   1        return 1;
 118   1      }
 119          
 120          
 121          
 122          /**********************************************************
 123          *  函数名称：读1bit数据函数
 124          *  修改日期：2019-9-9
 125          *  修改人：ZhangHJ
 126          *  说明：1.首先单片机端口拉低 1 us (i++),
 127          *        2.然后释放总线,拉高总线,
 128          *        3.等待几位秒，是为了让 DS18B20 数据稳定,
 129          *        4.在15 us 内读取DS数据,
 130          *        5.接下来进行延时等待采样周期完成。
 131          *        详见DS18B20资料2.8.3.1读/写时间片
 132          ***********************************************************/
 133          bit tmpreadbit(void)        // read a bit data
 134          {
 135   1        uint i;
 136   1        bit dat;                  // 定义位数据 (dat = 0 or 1)
 137   1        DS = 0;                   // 先将端口拉低
 138   1        _nop_();                  // 延时 2us ,要求至少保持1us
 139   1        DS = 1;                   // 再将端口拉高
 140   1        i=8;while(i>0)i--;        // 等待DS数据稳定,要求的至少延时15us以上
 141   1        dat = DS;                 // 数据传输
 142   1        i=15;while(i>0)i--;       // 等待数据采样周期完成,要求不低于60us
 143   1        return (dat);
 144   1      }
 145          
 146          
 147          
 148          /**********************************************************
 149          *  函数名称：读1Byte数据函数
 150          *  修改日期：2019-9-9
 151          *  修改人：ZhangHJ
 152          *  说明：1.首先初始化字节数据变量dat为 0
 153          *        2.循环 8 次,调用tmpreadbit函数,读 8bit 数据
 154          *        3.读出的数据暂存到 j ,之后进行移位和按位或操作
 155          *        4.效果是 j 先读入的数据,放到了dat的低位,读8次正好是1byte.
 156          *        5.最后返回读到的字节数据
 157          ***********************************************************/
 158          uchar tmpread(void)         // read a byte date
 159          {
 160   1        uchar i,j,dat;
 161   1        dat = 0;                  // 初始化数据变量为 0
 162   1        for(i=1;i<=8;i++)         // 循环 8 次,调用tmpreadbit函数,读 8bit 数据
 163   1        {
 164   2          j = tmpreadbit();       // 读出的数据暂存到 j
 165   2          dat = (j<<7)|(dat>>1);  // 效果是 j 先读入的数据,放到了dat的低位,读8次正好是1byte.
 166   2        }
 167   1        return(dat);              // 返回读到的字节
 168   1      }
 169          
 170          
 171          
 172          /**********************************************************
 173          *  函数名称：写入1Byte数据函数
 174          *  修改日期：2019-9-11
 175          *  修改人：ZhangHJ
 176          *  说明：1.将对待写入数据dat进行位操作,将dat末位数值赋值给位数据testb
 177          *        2.通过判断testb得到写 0 还是写 1
 178          *        3.若是写 0 操作,将 DS 拉低,进行<60us的延时,再将DS拉高,进行>1us的延时
C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 4   

 179          *        4.若是写 1 操作,将 DS 拉低,进行>1us的延时,再将DS拉高,进行<60us的延时
 180          *        5.循环执行2、3、4操作8次,写入1字节数据
 181          *        详见18B20资料“2.8.3.1读/写时间片”章节
 182          ***********************************************************/
 183          void tmpwritebyte(uchar dat)   //write a byte to ds18b20
 184          {
 185   1        uint i;
 186   1        uchar j;
 187   1        bit testb;
 188   1        for(j=1;j<=8;j++)
 189   1        {
 190   2          testb = dat&0x01;
 191   2          dat = dat>>1;
 192   2          if(testb)                 // write 1
 193   2          {
 194   3            DS=0;
 195   3            i=8;while(i>0)i--;;     // 延时要求15~60us内
 196   3            DS=1;
 197   3            i=15;while(i>0)i--;     // 要求不低于60us
 198   3          }
 199   2          else
 200   2          {
 201   3            DS = 0;                 // write 0
 202   3            i=15;while(i>0)i--;
 203   3            DS = 1;
 204   3            i++;i++;
 205   3          }
 206   2        }
 207   1      }
 208          
 209          
 210          
 211          /**********************************************************
 212          *  函数名称：18B20温度转换函数
 213          *  修改日期：2019-9-11
 214          *  修改人：ZhangHJ
 215          *  说明：1.首先进行18B20初始化
 216          *        2.进行适当延时
 217          *        3.发送跳过光刻ROM指令
 218          *        4.发送RAM指令,进行温度转换
 219          *        详见18B20资料“2.8.3.1存储器操作命令”章节
 220          ***********************************************************/
 221          void tmpchange(void)          // DS18B20 begin change
 222          {
 223   1        while(dsreset() == 0)
 224   1        {
 225   2          SendByte_74HC164(0);
 226   2          P1 &= 0xfB;
 227   2        }
 228   1        delay(1);
 229   1        tmpwritebyte(0xCC);         // 跳过 ROM 操作
 230   1        tmpwritebyte(0x44);         // 启动一次温度转换
 231   1      }
 232          
 233          
 234          
 235          /**********************************************************
 236          *  函数名称：18B20温度转换完整过程函数
 237          *  修改日期：2019-9-11
 238          *  修改人：ZhangHJ
 239          *  说明：1.首先进行18B20初始化
 240          *        2.进行适当延时
C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 5   

 241          *        3.发送跳过光刻ROM指令
 242          *        4.发送RAM指令,进行温度转换
 243          *        5.读取两个8位数据,放到16位寄存器 temp 中
 244          *        6.将读取到的二进制数据(默认为正数),转换为十进制数据
 245          *        7.返回温度数据
 246          *        详见18B20资料“2.8.3.1存储器操作命令”章节
 247          ***********************************************************/
 248          uint tmp()                    // get the temperature
 249          {
 250   1        float tt;
 251   1        uchar high,low;
 252   1        //P1 |= 0x0f;
 253   1        while(dsreset() == 0)
 254   1        {
 255   2          SendByte_74HC164(0);
 256   2          P1 &= 0xfB;
 257   2        }
 258   1        delay(1);
 259   1        //tmpchange();
 260   1        tmpwritebyte(0xCC);         // 跳过 ROM 操作
 261   1        tmpwritebyte(0xBE);         // 读暂存寄存器
 262   1        low=tmpread();
 263   1        high=tmpread();
 264   1        temp=high;
 265   1        temp<<=8;                   // two byte compose a int variable
 266   1        temp=temp|low;
 267   1        tt=temp*0.0625;
 268   1        temp=tt*10+0.5;
 269   1        return temp;
 270   1      }
 271          
 272          
 273          
 274          /**********************************************************
 275          *  函数名称：数码管温度数据显示函数
 276          *  修改日期：2019-9-11
 277          *  修改人：ZhangHJ
 278          *  说明：1.temp表示需要显示的温度数值(百位数值)
 279          *        2.A1、A2、A3分别了百位、十位、个位数值
 280          *        3.控制段选信号dula和位选信号wela,以使数码管显示
 281          ***********************************************************/
 282          void display(uint temp)       // 显示程序
 283          {
 284   1        uchar A1,A2,A2t,A3,ser;
 285   1        ser=temp/10;
 286   1        SBUF=ser;
 287   1        A1=temp/100;                // A1 --> 百位
 288   1        A2t=temp%100;               // A2t --> 后两位
 289   1        A2=A2t/10;                  // A2 --> 十位
 290   1        A3=A2t%10;                  // A3 --> 个位
 291   1        
 292   1        DP1 = 0;                    // 小数点
 293   1         
 294   1        // 控制数码管显示温度数值
 295   1        P1 |= 0x0f;
 296   1        SendByte_74HC164(A1);
 297   1        P1 &= 0xfB;
 298   1        delay(6);
 299   1        P1 |= 0x0f;
 300   1        
 301   1        SendByte_74HC164(A2);
 302   1        P1 &= 0xfD;
C51 COMPILER V9.57.0.0   MAIN                                                              10/04/2019 14:21:52 PAGE 6   

 303   1        delay(6);
 304   1        P1 |= 0x0f;
 305   1        
 306   1        SendByte_74HC164(A3);
 307   1        P1 &= 0xfE;
 308   1        delay(6);
 309   1        P1 |= 0x0f;
 310   1        
 311   1        // 位选高电平
 312   1      //  P1 &= 0x00;
 313   1      //  SendByte_74HC164(A1);
 314   1      //  P1 |= 0xf4;
 315   1      //  delay(6);
 316   1      //  P1 &= 0x00;
 317   1      //  
 318   1      //  SendByte_74HC164(A2);
 319   1      //  P1 |= 0xf2;
 320   1      //  delay(6);
 321   1      //  P1 &= 0x00;
 322   1      //  
 323   1      //  SendByte_74HC164(A3);
 324   1      //  P1 |= 0xf1;
 325   1      //  delay(6);
 326   1      }
 327          
 328          
 329          // 主函数功能: 在数码管显示温度(一位小数)
 330          void main()
 331          {
 332   1        uchar a;
 333   1        while(1)
 334   1        {
 335   2          tmpchange();              //首次温度转换
 336   2          for(a=50;a>0;a--)         //延时,保持连续显示
 337   2          {
 338   3            display(tmp());         //进行温度转换和数值显示
 339   3          }
 340   2        }
 341   1      }
 342          
 343          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    523    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
